# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/notes', type: :request do
  describe "GET /notes" do
    #Ideal implementation would be to search
    #according to an ID and its type
    #but it basically reduces to  ID because type
    #only serves to be a basic identifier and 
    #extra validation
    #Still, it seems like the solution would be to
    #use the NoteSearchService but the other way aroundSSS
  end
  describe 'search' do
    let!(:hola_mundo) { create(:note, title: 'Hola Mundo') }
    let!(:hola_rails) { create(:note, title: 'Hola Rails') }
    let!(:curso_rails) { create(:note, title: 'Curso Rails') }
    it 'should filter posts by title' do
      get '/notes?search=Hola'
      payload = JSON.parse(response.body)
      expect(payload).to_not be_empty
      expect(payload.size).to eq(2)
      expect(payload.map { |p| p['id'] }.sort).to eq([hola_mundo.id, hola_rails.id])
      expect(response).to have_http_status(200)
    end
  end
end
